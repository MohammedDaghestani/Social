# Generated by Django 3.2.5 on 2021-07-03 22:09

import accounts.models
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(error_messages={'unique': 'A user with that email already exists.'}, max_length=254, unique=True, verbose_name='email address')),
                ('first_name', models.CharField(blank=True, max_length=100, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=100, verbose_name='last name')),
                ('uuid', models.UUIDField(default=uuid.uuid4, help_text='uniqe id for the user', verbose_name='UUID')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', accounts.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='FacebookApp',
            fields=[
                ('name', models.CharField(max_length=100, verbose_name='app name')),
                ('app_id', models.CharField(max_length=255, primary_key=True, serialize=False, verbose_name='facebook app id')),
                ('app_secret', models.CharField(max_length=255, verbose_name='facebook app secret')),
                ('redirect_url', models.CharField(max_length=1000, verbose_name='redirect URL')),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='accounts.user')),
                ('facebook_user_id', models.CharField(blank=True, max_length=255, null=True, verbose_name='facebook user id')),
                ('facebook_user_code', models.CharField(blank=True, max_length=1000, null=True, verbose_name='facebook code')),
                ('facebook_user_access_token', models.CharField(blank=True, max_length=1000, null=True, verbose_name='facebook user access token')),
                ('facebook_user_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='facebook name')),
                ('pic_url', models.URLField(max_length=500, verbose_name='facebook profile picture')),
            ],
        ),
        migrations.CreateModel(
            name='FacebookPage',
            fields=[
                ('id', models.CharField(max_length=255, primary_key=True, serialize=False, verbose_name='facebook page id')),
                ('name', models.CharField(max_length=255, verbose_name='facebook page name')),
                ('access_token', models.CharField(max_length=1000, verbose_name='facebook page access token')),
                ('pic_url', models.URLField(max_length=500, verbose_name='Picture URL')),
                ('user_profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.userprofile')),
            ],
        ),
    ]
